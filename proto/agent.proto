syntax = "proto3";
/**
 * Agent related messages.
 */


package proto;
//option go_package = "";
option go_package = "github.com/headend/iptv-agent-service/proto";

message Agent {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    string ip_receive_multicast = 3 [json_name = "ip_receive_multicast"];
    int64 cpu = 4 [json_name = "cpu"];
    int64 ram = 5 [json_name = "ram"];
    int64 disk = 6 [json_name = "disk"];
    string location = 7 [json_name = "location"];
    bool is_monitor = 8 [json_name = "is_monitor"];
    bool is_alarm = 9 [json_name = "is_alarm"];
    bool signal_monitor = 10 [json_name = "signal_monitor"];
    bool video_monitor = 11 [json_name = "video_monitor"];
    bool audio_monitor = 12 [json_name = "audio_monitor"];
    int64 run_thread = 13 [json_name = "run_thread"];
    string date_create = 14 [json_name = "date_create"];
    bool status = 15 [json_name = "status"];
}

/**
 * Represents the params to identify agent.
 */
message AgentRequest {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    string ip_receive_multicast = 3 [json_name = "ip_receive_multicast"];
    int64 cpu = 4 [json_name = "cpu"];
    int64 ram = 5 [json_name = "ram"];
    int64 disk = 6 [json_name = "disk"];
    string location = 7 [json_name = "location"];
    bool is_monitor = 8 [json_name = "is_monitor"];
    bool is_alarm = 9 [json_name = "is_alarm"];
    bool signal_monitor = 10 [json_name = "signal_monitor"];
    bool video_monitor = 11 [json_name = "video_monitor"];
    bool audio_monitor = 12 [json_name = "audio_monitor"];
    int64 run_thread = 13 [json_name = "run_thread"];
    bool status = 14 [json_name = "status"];
}

message AgentFilter {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    string location = 3 [json_name = "location"];
}


message AgentUpdateStatus {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    bool status = 3 [json_name = "status"];
}

message AgentActiveMonitor {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    bool is_monitor = 3 [json_name = "is_monitor"];
}

message AgentActiveMonitorVideo {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    bool video_monitor = 3 [json_name = "video_monitor"];
}

message AgentActiveMonitorSignal {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    bool signal_monitor = 3 [json_name = "signal_monitor"];
}

message AgentActiveMonitorAudio {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    bool audio_monitor = 3 [json_name = "audio_monitor"];
}

message AgentUpdateMonitorRunThread {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
    int64 run_thread = 3 [json_name = "run_thread"];
}

message AgentDelete {
    int64 id = 1 [json_name = "id"];
    string ip_control = 2 [json_name = "ip_control"];
}

message AgentGetAll {
}

message AgentResponse {
    /**
    * Status
    */
    AgentResponseStatus Status = 1 [json_name = "status"];
    /**
    * Slice of agent object
    */
    repeated Agent agents = 2 [json_name = "data"];
}

enum AgentResponseStatus {
    FAIL = 0; /// Success
    SUCCESS = 1; /// Failed
}

service AgentCTLService {
    /**
    * Get All Agent
    */
    rpc Gets (AgentGetAll) returns (AgentResponse){
    }
    /**
    * Get Agent
    */
    rpc Get (AgentFilter) returns (AgentResponse){
    }
    /**
    * Add Agent
    */
    rpc Add (AgentRequest) returns (AgentResponse) {
    }

    /**
    * Update Agent
    */
    rpc Update (AgentRequest) returns (AgentResponse) {
    }

    /**
    * Update Agent status
    */
    rpc UpdateStatus (AgentUpdateStatus) returns (AgentResponse) {
    }

    /**
    * Update Agent
    */
    rpc UpdateRunthread (AgentUpdateMonitorRunThread) returns (AgentResponse) {
    }

    /**
    * Active monitor
    */
    rpc UpdateActiveMonitor (AgentActiveMonitor) returns (AgentResponse) {
    }

    /**
    * Active monitor
    */
    rpc UpdateMonitorSignal (AgentActiveMonitorSignal) returns (AgentResponse) {
    }

    /**
    * Active monitor video
    */
    rpc UpdateMonitorVideo (AgentActiveMonitorVideo) returns (AgentResponse) {
    }

    /**
    * Delete Agent
    */
    rpc Delete (AgentDelete) returns(AgentResponse){
    }
}

